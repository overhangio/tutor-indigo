

let themeCookie = 'indigo-toggle-dark';
let themeCookieExpiry = 90; // days

const AddDarkTheme = () => {
  const cookies = new Cookies();
  const isThemeToggleEnabled = getConfig().INDIGO_ENABLE_DARK_TOGGLE;

  const getCookieExpiry = () => {
    const today = new Date();
    return new Date(today.getFullYear(), today.getMonth(), today.getDate() + themeCookieExpiry);
  };

  const getCookieOptions = () => {
    const serverURL = new URL(getConfig().LMS_BASE_URL);
    const options = { domain: serverURL.hostname, path: '/', expires: getCookieExpiry() };
    return options;
  };

  const addDarkThemeToIframes = () => {
    const iframes = document.getElementsByTagName('iframe');
    const iframesLength = iframes.length;
    if (iframesLength > 0) {
      Array.from({ length: iframesLength }).forEach((_, index) => {
        const style = document.createElement('style');
        style.textContent = `
          body{
            background-color: #0D0D0E;
            color: #ccc;
          }
          a {color: #ccc;}
          a:hover{color: #d3d3d3;}
          `;
        if (iframes[index].contentDocument) { iframes[index].contentDocument.head.appendChild(style); }
      });
    }
  };

  useEffect(() => {
    const theme = cookies.get(themeCookie);

    // - When page loads, Footer loads before MFE content. Since there is no iframe on page,
    // it does not append any class. MutationObserver observes changes in DOM and hence appends dark
    // attributes when iframe is added. After 15 sec, this observer is destroyed to conserve resources. 
    // - It has been added outside dark-theme condition so that it can be removed on Component Unmount.
    // - Observer can be passed to `addDarkThemeToIframes` function and disconnected after observing Iframe.
    // This approach has a limitation: the observer first detects the iframe and then detects the docSrc. 
    // We need to wait for docSrc to fully load before appending the style tag.
    const observer = new MutationObserver(() => {
      addDarkThemeToIframes();
    });

    if (isThemeToggleEnabled && theme === 'dark') {
      document.body.classList.add('indigo-dark-theme');
      
      observer.observe(document.body, { childList: true, subtree: true });
      setTimeout(() => observer?.disconnect(), 15000); // clear after 15 sec to avoid resource usage

      cookies.set(themeCookie, theme, getCookieOptions());      //  on page load, update expiry
    }

    return () => observer?.disconnect();
  }, []);

  return (<div />);
};

const messages = defineMessages({
  'footer.poweredby.text': {
      id: 'footer.poweredby.text',
      defaultMessage: 'Powered by',
      description: 'text for the footer',
  },
  'footer.logo.altText': {
      id: 'footer.logo.altText',
      defaultMessage: 'Powered by Open edX',
      description: 'alt text for the footer logo.',
  },
  'footer.tutorlogo.altText': {
      id: 'footer.tutorlogo.altText',
      defaultMessage: 'Runs on Tutor',
      description: 'alt text for the footer tutor logo',
  },
  'footer.logo.ariaLabel': {
      id: 'footer.logo.ariaLabel',
      defaultMessage: 'edX Home',
      description: 'aria-label for the footer logo.',
  },
  'footer.copyright.text': {
      id: 'footer.copyright.text',
      defaultMessage: `Copyrights Â©${new Date().getFullYear()}. All Rights Reserved.`,
      description: 'copyright text for the footer',
  },
});

const IndigoFooter = () => {
  const { formatMessage } = useIntl();
  const config = getConfig();

  return (
    <div className="wrapper wrapper-footer">
      <footer id="footer" className="tutor-container">
          <div className="footer-top">
              <div className="powered-area">
                  <ul className="logo-list">
                      <li>{formatMessage(messages['footer.poweredby.text'])}</li>
                      <li>
                          <a href="https://edly.io/tutor/" rel="noreferrer" target="_blank">
                              <img src={`${config.LMS_BASE_URL}/theming/asset/images/tutor-logo.png`}
                                  alt={formatMessage(messages['footer.tutorlogo.altText'])} width="57" />
                          </a>
                      </li>
                      <li>
                          <a href="https://open.edx.org" rel="noreferrer" target="_blank">
                              <img src={`${config.LMS_BASE_URL}/theming/asset/images/openedx-logo.png`}
                                  alt={formatMessage(messages['footer.logo.altText'])} width="79" />
                          </a>
                      </li>
                  </ul>
              </div>
          </div>
          <span className="copyright-site">{formatMessage(messages['footer.copyright.text'])}</span>
          <PluginSlot id='footer_language_selector' />
      </footer>
    </div>
  );
};